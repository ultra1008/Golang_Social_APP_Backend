package receiver

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/niklod/highload-social-network/config"
	"github.com/niklod/highload-social-network/internal/cache"
	"github.com/niklod/highload-social-network/internal/user"
	"github.com/niklod/highload-social-network/internal/user/post"
	"github.com/streadway/amqp"
)

type FeedReceiver struct {
	ch          *amqp.Channel
	cfg         *config.RabbitMQConfig
	cache       cache.Cache
	postService *post.Service
	userService *user.Service
}

func NewFeedReceiver(ch *amqp.Channel, cfg *config.RabbitMQConfig, cache cache.Cache, postService *post.Service, userService *user.Service) *FeedReceiver {
	return &FeedReceiver{
		ch:          ch,
		cfg:         cfg,
		cache:       cache,
		postService: postService,
		userService: userService,
	}
}

func (f *FeedReceiver) Run() {
	msgs, err := f.ch.Consume(
		f.cfg.FeedQueueName,
		"",    // consumer id will be autogenerated
		false, // auto ack
		false, // exclusive
		false,
		false,
		nil,
	)
	if err != nil {
		log.Print(err)
	}

	stopCh := make(chan struct{})

	go func() {
		for m := range msgs {
			log.Printf("message id [%s] - received\n", m.MessageId)

			err := f.processNewMessage(m)
			if err != nil {
				log.Printf("message id [%s] - %v\n", m.MessageId, err)

				err := m.Nack(false, true)
				if err != nil {
					log.Printf("message id [%s] - %v\n", m.MessageId, err)
				}

				continue
			}

			log.Printf("message id [%s] - processed\n", m.MessageId)

			err = m.Ack(false)
			if err != nil {
				log.Printf("message id [%s] - can't Ack message: %v\n", m.MessageId, err)
			}
		}
	}()

	log.Printf("Consumer is working...")
	<-stopCh

}

func (f *FeedReceiver) processNewMessage(m amqp.Delivery) error {
	var feedMsg post.Post

	err := json.Unmarshal(m.Body, &feedMsg)
	if err != nil {
		return fmt.Errorf("receiver.processNewMessage - can't unmarshal message: %v", err)
	}

	authorId := feedMsg.Author.ID
	authorFriends, err := f.userService.Friends(authorId)
	if err != nil {
		return fmt.Errorf("receiver.processNewMessage - can't get author message: %v", cache.ErrInvalidCacheItem)
	}

	for _, friend := range authorFriends {
		v, ok := f.cache.Read(friend.ID)
		if ok {
			oldFeed, ok := v.(post.Feed)
			if !ok {
				return fmt.Errorf("receiver.processNewMessage - can't cast message: %v", cache.ErrInvalidCacheItem)
			}

			newFeed := append(oldFeed, feedMsg)
			newFeed.Sort()

			f.cache.Write(friend.ID, newFeed)

			continue
		}

		newFeed, err := f.postService.UserFeed(friend.ID)
		if err != nil {
			log.Printf("receiver.processNewMessage - can't get user feed: %v\n", err)

			continue
		}

		f.cache.Write(friend.ID, newFeed)
	}

	return nil
}
